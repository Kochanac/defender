from pathlib import Path
from secrets import token_hex
from enum import Enum

from api.model.exploit_model import Exploit, ExploitStatus, ExploitResult
import api.db.db as db
import api.db.exploits as exploit_db
import api.redis as redis
import tasks.tasks as tasks


def upload_exploit(task_id: int, user_id: int, exploit_text: str) -> Exploit:
	"""
	Загрузить эксплоит на хранилище, доступное из всех воркеров. Также создать эксплоит в БД
	Сейчас просто костыль который кладет это на диск
	"""
	exploit_path = Path(f"/tmp/exploits/{task_id}/{user_id}/{token_hex()}.py")

	exploit_path.parent.mkdir(exist_ok=True, parents=True)

	f = open(exploit_path, 'w')
	f.write(exploit_text)
	f.close()

	print(exploit_path)

	exploit_id = exploit_db.upload_exploit(user_id, task_id, str(exploit_path))

	return Exploit(
		exploit_id=exploit_id,
		task_id=task_id,
		user_id=user_id,
		exploit_path=str(exploit_path)
	)


def start_first_exploit(exploit_id: int):
	"""
	Запустить эксплоит на сервис.
	"""
	exp = get_exploit(exploit_id)

	task = db.get_task_info(exp.task_id)

	run_id = exploit_db.create_first_exploit_run(exploit_id, task.image_path)

	task = tasks.check_exploit.delay(run_id)
	task_id = task.id
	redis.set_exploit_run_celery_task(run_id, task_id)


def get_exploit(exploit_id: int) -> Exploit:
	exp = exploit_db.get_exploit(exploit_id)
	return exp


def get_first_exploit_status(user_id: int, task_id: int) -> tuple[ExploitStatus | None, ExploitResult | None]:
	first_exploit_run = exploit_db.get_first_exploit_run(user_id, task_id)
	if first_exploit_run is None:
		return None, None
	return get_exploit_status(first_exploit_run)


def get_exploit_status(run_id: int) -> tuple[ExploitStatus | None, ExploitResult | None]:
	run = exploit_db.get_exploit_run(run_id)
	if run is None:
		return None, None

	task_id = redis.get_exploit_run_celery_task(run_id)
	if task_id is None:
		return None, run.result
		
	celery_status = tasks.check_exploit.AsyncResult(task_id)

	status = None
	print(f"{celery_status=} {celery_status.status}")
	if celery_status.status == "STARTED":
		status = ExploitStatus.in_progress
	elif celery_status.status == "SUCCESS":
		status = ExploitStatus.checked

	return status, run.result
