from datetime import timedelta
from typing import List

import api.model.checker as m_checker
import api.repository.exploit.exploit as exploits
import api.repository.machine.adapters.exploit as exploit_machine
import api.repository.task.tasks as tasks
from api.misc import with_redis

from .. import simple as simple_checker

CHECKER_RUNS_STORE_COUNT = 5
REDIS_EXPIRE = timedelta(minutes=20)

fmt = "exploit_run_service_checker_runs/exploit:{exploit_run_id}"

@with_redis
def add_checker_run(r, exploit_run_id:int, run:m_checker.CheckerRun):
    key = fmt.format(exploit_run_id=exploit_run_id)
    r.lpush(key, run.run_id)
    r.ltrim(key, 0, CHECKER_RUNS_STORE_COUNT)


@with_redis
def get_checker_runs(r, exploit_run_id) -> List[m_checker.CheckerRun]:
    key = fmt.format(exploit_run_id=exploit_run_id)
    runs = r.lrange(key, 0, -1)
    if runs is None:
        return []

    res = []
    for run in runs:
        res.append(m_checker.CheckerRun(run_id=int(run.decode())))

    return res

@with_redis
def reset_checker_results(r, exploit_run_id):
    key = fmt.format(exploit_run_id=exploit_run_id)
    r.ltrim(key, 0, 0)

flag_fmt = "exploit_run_service_checker_runs/exploit:{exploit_run_id}/flag:{flag}/variant:{variant}"

@with_redis
def set_flag_run(r, exploit_run_id:int, flag:str, variant: m_checker.CheckVariant, run:m_checker.CheckerRun):
    key = flag_fmt.format(exploit_run_id=exploit_run_id, flag=flag, variant=variant)
    r.setex(key, REDIS_EXPIRE, run.run_id)


@with_redis
def get_flag_run(r, exploit_run_id, flag:str, variant: m_checker.CheckVariant) -> m_checker.CheckerRun | None:
    key = flag_fmt.format(exploit_run_id=exploit_run_id, flag=flag, variant=variant)
    run = r.get(key)
    if run is None:
        return None

    return m_checker.CheckerRun(run_id=int(run.decode()))



def check_start(exploit_run_id: int):
    mach = exploit_machine.get_machine(exploit_run_id)
    if mach is None:
        raise ValueError("machine is None")

    exploit = exploits.get_exploit_by_run_id(exploit_run_id)
    if exploit is None:
        raise ValueError('no exploit of this exploit_run_id')

    task = tasks.get_task_info(exploit.task_id)
    if task is None:
        raise ValueError("No such task")

    check = simple_checker.create_check(task, mach, m_checker.CheckVariant.health)

    add_checker_run(exploit_run_id, check)

    simple_checker.run_check(check)


def check_results(
    exploit_run_id: int,
) -> List[tuple[m_checker.CheckStatus | None, m_checker.CheckerResults | None]]:
    checker_runs = get_checker_runs(exploit_run_id)
    print(checker_runs)

    checker_results = []

    for i in range(CHECKER_RUNS_STORE_COUNT):
        if i >= len(checker_runs):
            checker_results.append((None, None))
            continue

        status, res = simple_checker.check_result(checker_runs[i])
        checker_results.append((status, res))

    return checker_results


def put_start(exploit_run_id: int, flag: str, vuln_id: str):
    mach = exploit_machine.get_machine(exploit_run_id)
    if mach is None:
        raise ValueError("machine is None")

    exploit = exploits.get_exploit_by_run_id(exploit_run_id)
    if exploit is None:
        raise ValueError('no exploit of this exploit_run_id')

    task = tasks.get_task_info(exploit.task_id)
    if task is None:
        raise ValueError("No such task")

    check = simple_checker.create_check(task, mach, m_checker.CheckVariant.put, flag, [vuln_id])

    set_flag_run(exploit_run_id, flag, m_checker.CheckVariant.put, check)

    simple_checker.run_check(check)


def get_start(exploit_run_id: int, flag_id: str, flag: str, vuln_id: str):
    mach = exploit_machine.get_machine(exploit_run_id)
    if mach is None:
        raise ValueError("machine is None")

    exploit = exploits.get_exploit_by_run_id(exploit_run_id)
    if exploit is None:
        raise ValueError('no exploit of this exploit_run_id')

    task = tasks.get_task_info(exploit.task_id)
    if task is None:
        raise ValueError("No such task")

    check = simple_checker.create_check(task, mach, m_checker.CheckVariant.get, flag, [flag_id, vuln_id])

    set_flag_run(exploit_run_id, flag, m_checker.CheckVariant.get, check)

    simple_checker.run_check(check)


def get_flag_put(exploit_run_id: int, flag: str) -> tuple[m_checker.CheckStatus | None, m_checker.CheckerResults | None]:
    run = get_flag_run(exploit_run_id, flag, m_checker.CheckVariant.put)
    if run is None:
        return None, None
    return simple_checker.check_result(run)

def get_flag_get(exploit_run_id: int, flag: str) -> tuple[m_checker.CheckStatus | None, m_checker.CheckerResults | None]:
    run = get_flag_run(exploit_run_id, flag, m_checker.CheckVariant.get)
    if run is None:
        return None, None
    return simple_checker.check_result(run)
